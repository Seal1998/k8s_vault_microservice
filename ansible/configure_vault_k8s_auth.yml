################
# - vars:
#     namespace
#     vault_token
#     auth_engine_name
#     vault_api_addr
#     k8s_api_addr
#     k8s_context
################

- hosts: localhost
  gather_facts: false
  vars:
    system_namespace: 'kube-system'
    sa_name: 'hvault-auth-delegator'
  tasks:
    - name: Configure sa and binging block
      block:
      - name: Creating '{{ sa_name }}' ServiceAccount
        k8s:
          context: '{{ k8s_context }}'
          state: "{{ 'absent' if 'undeploy' in ansible_run_tags else 'present' }}"
          namespace: '{{ system_namespace }}'
          definition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: '{{ sa_name }}'

      - name: Binding '{{ sa_name }}' ServiceAccount to the ClusterRole system:auth-delegator
        k8s:
          context: '{{ k8s_context }}'
          state: "{{ 'absent' if 'undeploy' in ansible_run_tags else 'present' }}"
          definition:
            apiVersion: rbac.authorization.k8s.io/v1beta1
            kind: ClusterRoleBinding
            metadata:
              name: '{{ sa_name }}-auth-delegator'
            subjects:
            - kind: ServiceAccount
              name: '{{ sa_name }}'
              namespace: '{{ system_namespace }}'
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: system:auth-delegator
      tags:
        - deploy
        - undeploy

    - name: Getting cluster info block
      block:
      - name: Getting '{{ sa_name }}' ServiceAccount from kube-system namespace
        k8s_info:
          context: '{{ k8s_context }}'
          namespace: '{{ system_namespace }}'
          name: '{{ sa_name }}'
          kind: ServiceAccount
        register: vault_sa

      - name: Getting '{{ sa_name }}' ServiceAccount Secret
        k8s_info:
          context: '{{ k8s_context }}'
          namespace: '{{ system_namespace }}'
          name: '{{ vault_sa.resources[0].secrets[0].name }}'
          kind: Secret
        register: vault_sa_token_secret

      - name: Getting cluster CA certificate and token
        set_fact:
          ca_cert: "{{ vault_sa_token_secret.resources[0].data['ca.crt'] | b64decode }}"
          k8s_token: "{{ vault_sa_token_secret.resources[0].data['token'] | b64decode }}"
      tags:
        - deploy

    - name: 'Enable k8s auth engine at path /{{ vault_k8s_auth_mount }}'
      uri:
        url: '{{ vault_api_addr }}/v1/sys/auth/{{ vault_k8s_auth_mount }}'
        method: POST
        headers:
          X-Vault-Token: '{{ vault_token }}'
        body_format: json
        body:
          type: kubernetes
        status_code:
          - 200
          - 204
      tags:
        - deploy

    - name: 'Disable k8s auth engine at path /{{ vault_k8s_auth_mount }}'
      uri:
        url: '{{ vault_api_addr }}/v1/sys/auth/{{ vault_k8s_auth_mount }}'
        method: DELETE
        headers:
          X-Vault-Token: '{{ vault_token }}'
        status_code:
          - 200
          - 204
      tags:
        - undeploy

    - name: 'Configure k8s auth engine at path /{{ vault_k8s_auth_mount }}'
      uri:
        url: '{{ vault_api_addr }}/v1/auth/{{ vault_k8s_auth_mount }}/config'
        method: POST
        headers:
          X-Vault-Token: '{{ vault_token }}'
        body_format: json
        body:
          kubernetes_host: '{{ k8s_api_addr }}'
          kubernetes_ca_cert: '{{ ca_cert }}'
          token_reviewer_jwt: '{{ k8s_token }}'
        status_code:
          - 200
          - 204
      tags:
        - deploy